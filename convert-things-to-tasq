#!/usr/bin/env python3
from __future__ import annotations

import sqlite3
import subprocess
import sys
import textwrap
from dataclasses import dataclass
from dataclasses import field
from enum import Enum
from pathlib import Path
from typing import Any


THINGS_DB_PATH = (
    Path.home()
    / "Library"
    / "Group Containers"
    / "JLMPQHK86H.com.culturedcode.ThingsMac"
    / "Things Database.thingsdatabase"
    / "main.sqlite"
)


def get_columns(cursor: sqlite3.Cursor) -> list[str]:
    columns = []
    for column_description in cursor.description:
        columns.append(column_description[0])
    return columns


def load_tasks_raw(
    conn: sqlite3.Connection, sql: str, parameters: tuple[Any, ...]
) -> list[Task]:
    cursor = conn.execute(sql, parameters)
    columns = get_columns(cursor)
    tasks = []
    for row in cursor:
        structured_row = {}
        for i, column in enumerate(row):
            structured_row[columns[i]] = column
        tasks.append(Task(**structured_row))
    return tasks


class Status(Enum):
    Open = 0
    Cancelled = 2
    Done = 3


@dataclass
class Task:
    # TODO: convert some of these from unstructured to structured
    uuid: Any
    userModificationDate: Any
    creationDate: Any
    trashed: int
    type: Any
    title: str
    notes: str
    dueDate: Any
    dueDateOffset: Any
    status: int
    stopDate: Any
    start: Any
    startDate: Any
    index: Any
    todayIndex: Any
    area: Any
    project: Any
    repeatingTemplate: Any
    delegate: Any
    recurrenceRule: Any
    instanceCreationStartDate: Any
    instanceCreationPaused: Any
    instanceCreationCount: Any
    afterCompletionReferenceDate: Any
    actionGroup: Any
    untrashedLeafActionsCount: Any
    openUntrashedLeafActionsCount: Any
    checklistItemsCount: Any
    openChecklistItemsCount: Any
    startBucket: Any
    alarmTimeOffset: Any
    lastAlarmInteractionDate: Any
    todayIndexReferenceDate: Any
    nextInstanceStartDate: Any
    dueDateSuppressionDate: Any
    leavesTombstone: Any
    repeater: Any
    repeaterMigrationDate: Any
    repeaterRegularSlotDatesCache: Any
    notesSync: Any
    cachedTags: Any

    sub_tasks: list[Task] = field(default_factory=list)

    @staticmethod
    def load(conn: sqlite3.Connection, uuid: str) -> Task:
        tasks = load_tasks_raw(
            conn,
            textwrap.dedent(
                """\
                    SELECT *
                    FROM TMTask
                    WHERE uuid = ?
                    ORDER BY "index" ASC
                """
            ),
            (uuid,),
        )
        if len(tasks) != 1:
            raise Exception(f"failed to find task with uuid {uuid}")
        task = tasks[0]
        task.sub_tasks = task.load_subtasks(conn)
        return task

    def load_subtasks(self, conn: sqlite3.Connection) -> list[Task]:
        tasks = load_tasks_raw(
            conn,
            textwrap.dedent(
                """\
                    SELECT *
                    FROM TMTask
                    WHERE project = ? OR actionGroup = ?
                    ORDER BY "index" ASC
                """
            ),
            (self.uuid, self.uuid),
        )
        for task in tasks:
            task.sub_tasks = task.load_subtasks(conn)
        return tasks

    def create_in_tasq(self) -> str:
        # create task
        uuid = subprocess.check_output(
            ("cargo", "run", "add", f"--title='{self.title}'", f"--description='{self.notes}'"),
            text=True,
        ).strip()
        for task in self.sub_tasks:
            sub_uuid = task.create_in_tasq()
            subprocess.check_call(
                ("cargo", "run", "connect", uuid, sub_uuid),
            )
        return uuid


def main(args: list[str]) -> None:
    if not THINGS_DB_PATH.exists():
        raise SystemExit("Things3 DB does not exist.")

    if len(args) != 2:
        raise SystemExit("Usage: convert-things-to-tasq <things URL>")

    things_uuid = args[1]
    things_uuid = things_uuid[len("things:///show?id=") :]

    with sqlite3.connect(THINGS_DB_PATH) as conn:
        task = Task.load(conn, things_uuid)
    task.create_in_tasq()


if __name__ == "__main__":
    main(sys.argv)
